{
    "imports": [
        "java.lang.Object",
        "java.lang.Runnable",
        "java.lang.String",
        "java.util.List",
        "java.util.Set",
        "java.util.concurrent.CompletableFuture",
        "java.util.function.Function",
        "java.util.function.IntConsumer",
        "java.util.function.IntFunction",
        "java.util.function.IntSupplier",
        "it.unimi.dsi.fastutil.longs.Long2ByteMap",
        "it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap",
        "it.unimi.dsi.fastutil.longs.Long2ObjectMap",
        "it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap",
        "it.unimi.dsi.fastutil.longs.LongSet",
        "io.github.opencubicchunks.cc_core.api.CubePos",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeTicketTracker",
        "io.github.opencubicchunks.cubicchunks.server.level.FixedPlayerDistanceCubeTracker",
        "io.github.opencubicchunks.cubicchunks.server.level.CubicPlayerTicketTracker",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeTaskPriorityQueue",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeTaskPriorityQueueSorter",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeTaskPriorityQueueSorter$Message",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeTaskPriorityQueueSorter$Release",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeTickingTracker",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeTracker",
        "io.github.opencubicchunks.cubicchunks.server.level.CubeHolder$CubeLoadingError",
        "io.github.opencubicchunks.cubicchunks.world.CubicNaturalSpawner$CubeGetter",
        "io.github.opencubicchunks.cubicchunks.world.level.chunk.ImposterProtoCube",
        "io.github.opencubicchunks.cubicchunks.world.level.chunk.LevelCube",
        "io.github.opencubicchunks.cubicchunks.world.level.chunk.ProtoCube",
        "net.minecraft.core.BlockPos",
        "net.minecraft.core.SectionPos",
        "net.minecraft.nbt.CompoundTag",
        "net.minecraft.server.level.ChunkHolder",
        "net.minecraft.server.level.ChunkHolder$1",
        "net.minecraft.server.level.ChunkHolder$LevelChangeListener",
        "net.minecraft.server.level.ChunkMap",
        "net.minecraft.server.level.ChunkTaskPriorityQueue",
        "net.minecraft.server.level.ChunkTaskPriorityQueueSorter",
        "net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message",
        "net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release",
        "net.minecraft.server.level.ChunkTracker",
        "net.minecraft.server.level.DistanceManager",
        "net.minecraft.server.level.DistanceManager$ChunkTicketTracker",
        "net.minecraft.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
        "net.minecraft.server.level.DistanceManager$PlayerTicketTracker",
        "net.minecraft.server.level.Ticket",
        "net.minecraft.server.level.TicketType",
        "net.minecraft.server.level.TickingTracker",
        "net.minecraft.server.level.ServerLevel",
        "net.minecraft.server.level.ServerPlayer",
        "net.minecraft.util.SortedArraySet",
        "net.minecraft.util.thread.ProcessorHandle",
        "net.minecraft.world.entity.MobCategory",
        "net.minecraft.world.level.ChunkPos",
        "net.minecraft.world.level.Level",
        "net.minecraft.world.level.LocalMobCapCalculator",
        "net.minecraft.world.level.NaturalSpawner",
        "net.minecraft.world.level.NaturalSpawner$ChunkGetter",
        "net.minecraft.world.level.NaturalSpawner$SpawnPredicate",
        "net.minecraft.world.level.NaturalSpawner$AfterSpawnCallback",
        "net.minecraft.world.level.NaturalSpawner$SpawnState",
        "net.minecraft.world.level.chunk.ChunkAccess",
        "net.minecraft.world.level.chunk.ChunkStatus",
        "net.minecraft.world.level.chunk.ChunkStatus$ChunkType",
        "net.minecraft.world.level.chunk.ImposterProtoChunk",
        "net.minecraft.world.level.chunk.LevelChunk",
        "net.minecraft.world.level.chunk.ProtoChunk"
    ],
    "sets": {
        "general": {
            "typeRedirects": {
                "ChunkPos": "CubePos",
                "LevelChunk": "LevelCube",
                "ProtoChunk": "ProtoCube",
                "ImposterProtoChunk": "ImposterProtoCube",
                "DistanceManager$ChunkTicketTracker": "CubeTicketTracker",
                "DistanceManager$FixedPlayerDistanceChunkTracker": "FixedPlayerDistanceCubeTracker",
                "DistanceManager$PlayerTicketTracker": "CubicPlayerTicketTracker",
                "ChunkTaskPriorityQueue": "CubeTaskPriorityQueue",
                "ChunkTaskPriorityQueueSorter": "CubeTaskPriorityQueueSorter",
                "ChunkTaskPriorityQueueSorter$Message": "CubeTaskPriorityQueueSorter$Message",
                "ChunkTaskPriorityQueueSorter$Release": "CubeTaskPriorityQueueSorter$Release",
                "TickingTracker": "CubeTickingTracker",
                "ChunkHolder$1": "CubeHolder$CubeLoadingError",
                "ChunkTracker": "CubeTracker"
            },
            "fieldRedirects": {
                "ChunkMap | ProcessorHandle mainThreadMailbox": "cubeMainThreadMailbox",
                "ChunkMap | LongSet toDrop": "cubesToDrop",
                "ChunkMap | int MAX_CHUNK_DISTANCE": "MAX_CUBE_DISTANCE",

                "DistanceManager | Long2ObjectMap playersPerChunk": "playersPerCube",
                "DistanceManager | Long2ObjectOpenHashMap tickets": "cubeTickets",
                "DistanceManager | DistanceManager$ChunkTicketTracker ticketTracker": "cubeTicketTracker",
                "DistanceManager | DistanceManager$FixedPlayerDistanceChunkTracker naturalSpawnChunkCounter": "naturalSpawnCubeCounter",
                "DistanceManager | TickingTracker tickingTicketsTracker": "tickingCubeTicketsTracker",
                "DistanceManager | DistanceManager$PlayerTicketTracker playerTicketManager": "cubicPlayerTicketManager",
                "DistanceManager | Set chunksToUpdateFutures": "cubesToUpdateFutures",
                "DistanceManager | ChunkTaskPriorityQueueSorter ticketThrottler": "cubeTicketThrottler",
                "DistanceManager | ProcessorHandle ticketThrottlerInput": "cubeTicketThrottlerInput",
                "DistanceManager | ProcessorHandle ticketThrottlerReleaser": "cubeTicketThrottlerReleaser",
                "DistanceManager | LongSet ticketsToRelease": "cubeTicketsToRelease",
                "DistanceManager | long ticketTickCounter": "cubeTicketTickCounter",

                "DistanceManager$FixedPlayerDistanceChunkTracker | Long2ByteMap chunks": "cubes",

                "ChunkTaskPriorityQueue | int PRIORITY_LEVEL_COUNT": "LEVEL_COUNT",

                "ChunkTaskPriorityQueueSorter$Message | Function task": "task",
                "ChunkTaskPriorityQueueSorter$Message | long pos": "pos",
                "ChunkTaskPriorityQueueSorter$Message | IntSupplier level": "level",

                "ChunkTaskPriorityQueueSorter$Release | Runnable task": "task",
                "ChunkTaskPriorityQueueSorter$Release | long pos": "pos",
                "ChunkTaskPriorityQueueSorter$Release | boolean clearQueue": "clearQueue",

                "ChunkHolder | ChunkPos pos": "cubePos"
            },
            "methodRedirects": {
                "LevelChunk | ChunkPos getPos()": {
                    "newName": "getCubePos",
                    "mappingsOwner": "ChunkAccess"
                },
                "ChunkAccess | ChunkPos getPos()": "getCubePos",

                "ChunkPos | long toLong()": "asLong",
                "ChunkPos | long asLong(int, int)": "asLong",
                "ChunkPos | long asLong(BlockPos)": "asLong",

                "SectionPos | ChunkPos chunk()": "cube__ReplaceWithMixin",

                "ChunkMap | boolean anyPlayerCloseEnoughForSpawning(ChunkPos)": "anyPlayerCloseEnoughForSpawning",
                "ChunkMap | double euclideanDistanceSquared(ChunkPos, ServerPlayer)": "euclideanDistanceSquared",
                "ChunkMap | CompletableFuture getChunkRangeFuture(ChunkPos, int, IntFunction)": "getCubeRangeFuture",
                "ChunkMap | IntSupplier getChunkQueueLevel(long)": "getCubeQueueLevel",
                "ChunkMap | List getPlayersCloseForSpawning(ChunkPos)": "getPlayersCloseForSpawning",
                "ChunkMap | ChunkHolder getUpdatingChunkIfPresent(long)": "getUpdatingCubeIfPresent",
                "ChunkMap | ChunkHolder getVisibleChunkIfPresent(long)": "getVisibleCubeIfPresent",
                "ChunkMap | boolean playerIsCloseEnoughForSpawning(ServerPlayer, ChunkPos)": "playerIsCloseEnoughForSpawning",
                "ChunkMap | CompletableFuture prepareAccessibleChunk(ChunkHolder)": "prepareAccessibleCube",
                "ChunkMap | CompletableFuture prepareTickingChunk(ChunkHolder)": "prepareTickingCube",
                "ChunkMap | CompletableFuture prepareEntityTickingChunk(ChunkPos)": "prepareEntityTickingCube",
                "ChunkMap | ChunkHolder updateChunkScheduling(long, int, ChunkHolder, int)": "updateCubeScheduling",

                "DistanceManager | void purgeStaleTickets()": "purgeStaleCubeTickets",
                "DistanceManager | boolean runAllUpdates(ChunkMap)": "runAllUpdatesCubic",
                "DistanceManager | void addTicket(long, Ticket)": "addCubeTicket",
                "DistanceManager | void removeTicket(long, Ticket)": "removeCubeTicket",
                "DistanceManager | void addTicket(TicketType, ChunkPos, int, Object)": "addCubeTicket",
                "DistanceManager | void removeTicket(TicketType, ChunkPos, int, Object)": "removeCubeTicket",
                "DistanceManager | void addRegionTicket(TicketType, ChunkPos, int, Object)": "addCubeRegionTicket",
                "DistanceManager | void removeRegionTicket(TicketType, ChunkPos, int, Object)": "removeCubeRegionTicket",
                "DistanceManager | SortedArraySet getTickets(long)": "getCubeTickets",
                "DistanceManager | void updateChunkForced(ChunkPos, boolean)": "updateCubeForced",
                "DistanceManager | void addPlayer(SectionPos, ServerPlayer)": "addCubePlayer",
                "DistanceManager | void removePlayer(SectionPos, ServerPlayer)": "removeCubePlayer",
                "DistanceManager | boolean inEntityTickingRange(long)": "isEntityTickingRangeCube",
                "DistanceManager | boolean inBlockTickingRange(long)": "inBlockTickingRangeCube",
                "DistanceManager | int getNaturalSpawnChunkCount()": "getNaturalSpawnCubeCount",
                "DistanceManager | boolean hasPlayersNearby(long)": "hasPlayersNearbyCube",
                "DistanceManager | void removeTicketsOnClosing()": "removeCubeTicketsOnClosing",
                "DistanceManager | int getTicketLevelAt(SortedArraySet)": "getCubeTicketLevelAt",
                "DistanceManager | boolean isChunkToRemove(long)": "isCubeToRemove",
                "DistanceManager | ChunkHolder getChunk(long)": "getCube",
                "DistanceManager | ChunkHolder updateChunkScheduling(long, int, ChunkHolder, int)": "updateCubeScheduling",

                "DistanceManager$ChunkTicketTracker | int runDistanceUpdates(int)": "runDistanceUpdates",
                "DistanceManager$ChunkTicketTracker | void update(long, int, boolean)": {
                    "newName": "update",
                    "mappingsOwner": "ChunkTracker"
                },

                "DistanceManager$FixedPlayerDistanceChunkTracker | void runAllUpdates()": "runAllUpdates",
                "DistanceManager$FixedPlayerDistanceChunkTracker | void update(long, int, boolean)": {
                    "newName": "update",
                    "mappingsOwner": "ChunkTracker"
                },

                "DistanceManager$PlayerTicketTracker | void runAllUpdates()": {
                    "newName": "runAllUpdates",
                    "mappingsOwner": "DistanceManager$FixedPlayerDistanceChunkTracker"
                },
                "DistanceManager$PlayerTicketTracker | void update(long, int, boolean)": {
                    "newName": "update",
                    "mappingsOwner": "ChunkTracker"
                },

                "TickingTracker | SortedArraySet getTickets(long)": "getTickets",
                "TickingTracker | void addTicket(long, Ticket)": "addTicket",
                "TickingTracker | void addTicket(TicketType, ChunkPos, int, Object)": "addTicket",
                "TickingTracker | void removeTicket(long, Ticket)": "removeTicket",
                "TickingTracker | void removeTicket(TicketType, ChunkPos, int, Object)": "removeTicket",
                "TickingTracker | void replacePlayerTicketsLevel(int)": "replacePlayerTicketsLevel",
                "TickingTracker | int getLevel(ChunkPos)": "getLevel",
                "TickingTracker | void runAllUpdates()": "runAllUpdates",
                "TickingTracker | String getTicketDebugString(long)": "getTicketDebugString",

                "ChunkTaskPriorityQueueSorter | ChunkTaskPriorityQueueSorter$Message message(Runnable, long, IntSupplier)": "message",
                "ChunkTaskPriorityQueueSorter | ChunkTaskPriorityQueueSorter$Message message(ChunkHolder, Runnable)": "message",
                "ChunkTaskPriorityQueueSorter | ChunkTaskPriorityQueueSorter$Release release(Runnable, long, boolean)": "release",
                "ChunkTaskPriorityQueueSorter | ProcessorHandle getProcessor(ProcessorHandle, boolean)": "getProcessor",
                "ChunkTaskPriorityQueueSorter | ProcessorHandle getReleaseProcessor(ProcessorHandle)": "getReleaseProcessor",
                "ChunkTaskPriorityQueueSorter | void onLevelChange(ChunkPos, IntSupplier, int, IntConsumer)": "onCubeLevelChange",

                "ChunkHolder | ChunkStatus getStatus(int)": "getCubeStatus",
                "ChunkHolder | ChunkPos getPos()": "getCubePos",
                "ChunkHolder$LevelChangeListener | void onLevelChange(ChunkPos, IntSupplier, int, IntConsumer)": "onCubeLevelChange",

                "ChunkStatus | ChunkStatus getStatusAroundFullChunk(int)": "getStatusAroundFullCube"
            }
        },
        "chunkMapSet": {
            "typeRedirects": {
            },
            "fieldRedirects": {
                "ChunkMap | Long2ObjectLinkedOpenHashMap pendingUnloads": "pendingCubeUnloads",
                "ChunkMap | ChunkTaskPriorityQueueSorter queueSorter": "cubeQueueSorter",
                "ChunkMap | Long2ObjectLinkedOpenHashMap updatingChunkMap": "updatingCubeMap",
                "ChunkMap | Long2ByteMap chunkTypeCache": "cubeTypeCache"
            },
            "methodRedirects": {
                "ChunkMap | CompoundTag readChunk(ChunkPos)": "readCubeNBT",
                "ChunkMap | void markPositionReplaceable(ChunkPos)": "markCubePositionReplaceable",
                "ChunkMap | byte markPosition(ChunkPos, ChunkStatus$ChunkType)": "markCubePosition"
            }
        },
        "naturalSpawnerSet": {
            "typeRedirects": {
                "NaturalSpawner$ChunkGetter": "CubicNaturalSpawner$CubeGetter"
            },
            "fieldRedirects": {},
            "methodRedirects": {
                "NaturalSpawner | void spawnCategoryForChunk(MobCategory, ServerLevel, LevelChunk, NaturalSpawner$SpawnPredicate, NaturalSpawner$AfterSpawnCallback)": "spawnCategoryForCube",
                "NaturalSpawner | BlockPos getRandomPosWithin(Level, LevelChunk)": "getRandomPosWithinCube",
                "NaturalSpawner$SpawnState | boolean canSpawnForCategory(MobCategory, ChunkPos)": "canSpawnForCategory",
                "LocalMobCapCalculator | void addMob(ChunkPos, MobCategory)": "addMob"
            }
        }
    }
}