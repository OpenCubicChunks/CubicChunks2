{
    "imports": [
        "java.lang.Iterable",
        "java.util.List",
        "java.lang.Object",
        "java.util.concurrent.CompletableFuture",
        "java.util.concurrent.Executor",
        "java.util.function.IntSupplier",
        "net.minecraft.core.BlockPos$MutableBlockPos",
        "net.minecraft.core.SectionPos",
        "net.minecraft.server.level.ChunkHolder",
        "net.minecraft.server.level.ChunkHolder$LevelChangeListener",
        "net.minecraft.server.level.ChunkHolder$PlayerProvider",
        "net.minecraft.server.level.ChunkMap",
        "net.minecraft.server.level.ChunkMap$DistanceManager",
        "net.minecraft.server.level.ChunkTaskPriorityQueue",
        "net.minecraft.server.level.ChunkTaskPriorityQueueSorter",
        "net.minecraft.server.level.DistanceManager",
        "net.minecraft.server.level.DistanceManager$ChunkTicketTracker",
        "net.minecraft.server.level.DistanceManager$FixedPlayerDistanceChunkTracker",
        "net.minecraft.server.level.ServerLevel",
        "net.minecraft.server.level.ServerPlayer",
        "net.minecraft.server.level.Ticket",
        "net.minecraft.server.level.TicketType",
        "net.minecraft.server.level.TickingTracker",
        "net.minecraft.util.SortedArraySet",
        "net.minecraft.world.entity.MobCategory",
        "net.minecraft.world.level.ChunkPos",
        "net.minecraft.world.level.LevelHeightAccessor",
        "net.minecraft.world.level.LocalMobCapCalculator",
        "net.minecraft.world.level.NaturalSpawner",
        "net.minecraft.world.level.NaturalSpawner$AfterSpawnCallback",
        "net.minecraft.world.level.NaturalSpawner$ChunkGetter",
        "net.minecraft.world.level.NaturalSpawner$SpawnPredicate",
        "net.minecraft.world.level.NaturalSpawner$SpawnState",
        "net.minecraft.world.level.chunk.ChunkAccess",
        "net.minecraft.world.level.chunk.ChunkStatus",
        "net.minecraft.world.level.chunk.ChunkStatus$ChunkType",
        "net.minecraft.world.level.chunk.ImposterProtoChunk",
        "net.minecraft.world.level.chunk.LevelChunk",
        "net.minecraft.world.level.lighting.LevelLightEngine"
    ],
    "defaultSets": [ "general" ],
    "targets": {
        "ChunkTaskPriorityQueue": {
        },
        "ChunkTaskPriorityQueueSorter": {
        },
        "DistanceManager$ChunkTicketTracker": {
        },
        "TickingTracker": {
        },
        "DistanceManager$FixedPlayerDistanceChunkTracker": {
        },
        "ChunkStatus": {
            "targetMethods": {
                "ChunkStatus getStatusAroundFullChunk(int)": "getStatusAroundFullCube"
            },
            "useSets": [
            ]
        },
        "ChunkMap$DistanceManager": {
            "targetMethods": {
                "ChunkHolder updateChunkScheduling(long, int, ChunkHolder, int)": {
                    "newName": "updateCubeScheduling",
                    "mappingsOwner": "DistanceManager"
                },
                "boolean isChunkToRemove(long)": {
                    "newName": "isCubeToRemove",
                    "mappingsOwner": "DistanceManager"
                },
                "ChunkHolder getChunk(long)": {
                    "newName": "getCube",
                    "mappingsOwner": "DistanceManager"
                }
            }
        },
        "ChunkMap": {
            "targetMethods": {
                "boolean anyPlayerCloseEnoughForSpawning(ChunkPos)": "anyPlayerCloseEnoughForSpawning",
                "List getPlayersCloseForSpawning(ChunkPos)": "getPlayersCloseForSpawning",
                "IntSupplier getChunkQueueLevel(long)": "getCubeQueueLevel",
                "Iterable getChunks()": "getCubes",
                "ChunkStatus getDependencyStatus(ChunkStatus, int)" : "getCubeDependencyStatus",
                "ChunkHolder getUpdatingChunkIfPresent(long)": "getUpdatingCubeIfPresent",
                "ChunkHolder getVisibleChunkIfPresent(long)": "getVisibleCubeIfPresent",
                "boolean isExistingChunkFull(ChunkPos)": "isExistingCubeFull",
                "byte markPosition(ChunkPos, ChunkStatus$ChunkType)": "markCubePosition",
                "void markPositionReplaceable(ChunkPos)": "markCubePositionReplaceable",
                "boolean playerIsCloseEnoughForSpawning(ServerPlayer, ChunkPos)": "playerIsCloseEnoughForSpawning",
                "CompletableFuture prepareAccessibleChunk(ChunkHolder)": "prepareAccessibleCube",
                "CompletableFuture prepareEntityTickingChunk(ChunkPos)": "prepareEntityTickingCube",
                "void releaseLightTicket(ChunkPos)": "releaseCubeLightTicket",
                "ChunkHolder updateChunkScheduling(long, int, ChunkHolder, int)": {
                    "newName": "updateCubeScheduling",
                    "makeSyntheticAccessor": true
                }
            },
            "useSets": [
                "general",
                "chunkMapSet"
            ]
        },
        "NaturalSpawner": {
            "targetMethods": {
                "void spawnForChunk(ServerLevel, LevelChunk, NaturalSpawner$SpawnState, boolean, boolean, boolean)": "spawnForCube",
                "void spawnCategoryForChunk(MobCategory, ServerLevel, LevelChunk, NaturalSpawner$SpawnPredicate, NaturalSpawner$AfterSpawnCallback)": "spawnCategoryForCube",
                "boolean isRightDistanceToPlayerAndSpawnPoint(ServerLevel, ChunkAccess, BlockPos$MutableBlockPos, double)": "isRightDistanceToPlayerAndSpawnPointForCube",
                "NaturalSpawner$SpawnState createState(int, Iterable, NaturalSpawner$ChunkGetter, LocalMobCapCalculator)": "createCubicState"
            },
            "useSets": [
                "general",
                "naturalSpawnerSet"
            ]
        },
        "ChunkHolder": {
            "targetMethods": {
                "void <init>(ChunkPos, int, LevelHeightAccessor, LevelLightEngine, ChunkHolder$LevelChangeListener, ChunkHolder$PlayerProvider)": "\u003cinit\u003e",
                "CompletableFuture getEntityTickingChunkFuture()": "getCubeEntityTickingFuture",
                "CompletableFuture getFutureIfPresentUnchecked(ChunkStatus)": "getCubeFutureIfPresentUnchecked",
                "CompletableFuture getFutureIfPresent(ChunkStatus)": "getCubeFutureIfPresent",
                "LevelChunk getTickingChunk()": "getTickingCube",
                "void replaceProtoChunk(ImposterProtoChunk)": "replaceProtoCube",
                "void updateFutures(ChunkMap, Executor)": "updateCubeFutures"
            },
            "useSets": [
                "general"
            ]
        },
        "DistanceManager": {
            "targetMethods": {
                "void purgeStaleTickets()": "purgeStaleCubeTickets",
                "boolean runAllUpdates(ChunkMap)": "runAllUpdatesCubic",
                "void addTicket(long, Ticket)": "addCubeTicket",
                "void removeTicket(long, Ticket)": "removeCubeTicket",
                "void addTicket(TicketType, ChunkPos, int, Object)": "addCubeTicket",
                "void removeTicket(TicketType, ChunkPos, int, Object)": "removeCubeTicket",
                "void addRegionTicket(TicketType, ChunkPos, int, Object)": "addCubeRegionTicket",
                "void removeRegionTicket(TicketType, ChunkPos, int, Object)": "removeCubeRegionTicket",
                "SortedArraySet getTickets(long)": "getCubeTickets",
                "void updateChunkForced(ChunkPos, boolean)": "updateCubeForced",
                "void addPlayer(SectionPos, ServerPlayer)": "addCubePlayer",
                "void removePlayer(SectionPos, ServerPlayer)": "removeCubePlayer",
                "boolean inEntityTickingRange(long)": "isEntityTickingRangeCube",
                "boolean inBlockTickingRange(long)": "inBlockTickingRangeCube",
                "int getNaturalSpawnChunkCount()": "getNaturalSpawnCubeCount",
                "boolean hasPlayersNearby(long)": "hasPlayersNearbyCube",
                "void removeTicketsOnClosing()": "removeCubeTicketsOnClosing",
                "int getTicketLevelAt(SortedArraySet)": "getCubeTicketLevelAt"
            }
        }
    }
}