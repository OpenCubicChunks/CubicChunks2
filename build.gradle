buildscript {
    dependencies {
        classpath("com.google.code.gson:gson:2.8.5")
    }
}
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' // version in buildSrc build.gradle
    id("io.github.opencubicchunks.javaheaders").version("1.2.8")
    id("io.github.opencubicchunks.gradle.mcGitVersion")
    id("io.github.opencubicchunks.gradle.mixingen")
    id("io.github.opencubicchunks.gradle.dasm")
}

version = mod_version
group = mod_group_id

base {
    archivesName.set(mod_name)
}

javaHeaders {
    setAcceptedJars(".*CubicChunksCore.*")
    setConfig(file("javaHeaders.json"))
    // setDebug(debugArtifactTransforms.toBoolean())
}

mcGitVersion {
    snapshot = true
    mcVersion = minecraft_version
    setCommitVersion("570c0cbf0cdc15b8348a862a519d3399a943af9", "0.0")
}

//sourceSets {
//    create("gametest") {
//        compileClasspath += configurations.compileClasspath
//        compileClasspath += configurations.testCompileClasspath
//        compileClasspath += sourceSets.main.output
//        runtimeClasspath += configurations.runtimeClasspath
//        runtimeClasspath += configurations.testRuntimeClasspath
//        runtimeClasspath += sourceSets.main.output
//    }
//}

tasks.register("generatePackageInfo") {
    group = "filegen"
    doFirst {
        // GeneratePackageInfo.generateFiles(project.sourceSets["main"])
        // GeneratePackageInfo.generateFiles(project.sourceSets["test"])
    }
}

tasks.register("genAll") {
    group = "filegen"
    dependsOn(generatePackageInfo, "generateMixinConfigs")
}


// TODO mixin auto-gen for mixins in the test sourceset
mixinGen {
    filePattern = "cubicchunks.mixins.%s.json"
    defaultRefmap = "CubicChunks-refmap.json"
    defaultPackagePrefix = "io.github.opencubicchunks.cubicchunks.mixin"
    defaultCompatibilityLevel = "JAVA_17"
    defaultMinVersion = "0.8"

    config("core") {
        it.required = true
        it.conformVisibility = true
        it.injectorsDefaultRequire = 1
        it.configurationPlugin = "io.github.opencubicchunks.cubicchunks.mixin.ASMConfigPlugin"
    }
/*
    config("levelgen") {
        required = true
        conformVisibility = true
        injectorsDefaultRequire = 1
    }

    config("access") {
        required = true
        conformVisibility = true
    }

    config("asm") {
        required = true
        configurationPlugin = "io.github.opencubicchunks.cubicchunks.mixin.ASMConfigPlugin"
    }

    config("asmfixes") {
        required = true
        injectorsDefaultRequire = 1
    }

    config("optifine") {
        required = true
        configurationPlugin = "io.github.opencubicchunks.cubicchunks.mixin.OptiFineMixinConfig"
        injectorsDefaultRequire = 1
    }

    config("debug") {
        required = false
        conformVisibility = true
        injectorsDefaultRequire = 0
        configurationPlugin = "io.github.opencubicchunks.cubicchunks.mixin.DebugMixinConfig"
    }

    config("test") {
        required = true
        conformVisibility = true
        injectorsDefaultRequire = 1
        configurationPlugin = "io.github.opencubicchunks.cubicchunks.mixin.TestMixinConfig"
    }*/
}

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

configurations {
    libraries {}
    implementation.extendsFrom libraries
    extraTests
}

runs {
    def args = [
            "-XX:+IgnoreUnrecognizedVMOptions",
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:+AllowEnhancedClassRedefinition",
            "-XX:-OmitStackTraceInFastThrow",
            "-XX:+UseG1GC",
            "-XX:G1NewSizePercent=20",
            "-XX:G1ReservePercent=20",
            "-XX:MaxGCPauseMillis=50",
            "-XX:G1HeapRegionSize=32M",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.checks.interfaces=true",
            "-Dcubicchunks.debug=false",
            "-Dcubicchunks.debug.loadorder=false",
            "-Dcubicchunks.debug.window=false",
            "-Dcubicchunks.debug.statusrenderer=false",
            "-Dcubicchunks.debug.heightmaprenderer=false",
            "-Dcubicchunks.debug.heightmaprenderer.server=false",
            "-Dcubicchunks.debug.heightmaprenderer.render_lightmap=false",
            "-Dcubicchunks.debug.heightmaprenderer.radius=2",
            "-Dcubicchunks.debug.heightmapverification=false",
            "-Dcubicchunks.debug.heightmapverification.frequency=1",
            "-Dcubicchunks.debug.biomes=false",
            "-ea"
    ]
    // applies to all the run configs below
    configureEach {
        jvmArguments args
        // systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
        dependencies {
            runtime project.configurations.libraries
        }
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    maven { setUrl("https://jitpack.io") }
    maven { setUrl("https://maven.fabricmc.net/") }
    //maven {
    //    name = "Gegy"
    //    setUrl("https://maven.gegy.dev")
    //}
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation(project(":CubicChunksCore")) {
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements.class, LibraryElements.JAR))
        }
        transitive = false
    }
    extraTests(project(":CubicChunksCore")) {
        targetConfiguration = "testArchivesOutput"
    }

    libraries("com.github.OpenCubicChunks:dasm:9709b98") {
        transitive = false
    }
    libraries("io.github.opencubicchunks:regionlib:0.63.0-SNAPSHOT")
    libraries("org.spongepowered:noise:2.0.0-SNAPSHOT")

    // NeoForge does not yet support JUnit tests, so we use fabric loader for this instead.
    testImplementation("net.fabricmc:fabric-loader-junit:0.15.3") // required for bootstrapping in unit tests
    testImplementation("org.assertj:assertj-core:3.25.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")

    testImplementation("org.hamcrest:hamcrest-junit:2.0.0.0")
    testImplementation("org.hamcrest:hamcrest:2.2")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

project.tasks.matching {
    // Using prepareKotlinBuildScriptModel instead of ideaSyncTask as it was removed
    it.name == "prepareKotlinBuildScriptModel"
}.forEach {
    it.dependsOn("CubicChunksCore:assemble")
}

// unzipping subproject (CubicChunksCore) tests
tasks.register('unzipTests', Copy) {
    outputs.upToDateWhen {
        false
    }
    dependsOn(configurations.named("extraTests"))
    from(configurations.named("extraTests"))
    doFirst {
        //noinspection ConfigurationAvoidance, we actually do want to resolve here
        var testsFile = configurations["extraTests"].resolve().iterator().next()
        from(zipTree(testsFile))
        exclude(testsFile.name)
    }
    into(sourceSets.test.output.classesDirs.asPath)
}

test {
    minHeapSize = "512M"
    maxHeapSize = "2048M"

    dependsOn(project.tasks.named("unzipTests"))
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn("cleanTest")

    // Show test results.
    testLogging {
        events("passed", "skipped", "failed")
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
