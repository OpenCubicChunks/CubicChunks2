import io.github.opencubicchunks.gradle.GeneratePackageInfo
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'net.fabricmc:fabric-loom:0.13.1'
        classpath 'io.github.opencubicchunks:javaheaders:1.2.4'
        classpath 'com.google.code.gson:gson:2.8.5'
    }
}
plugins {
    id 'maven-publish'
    id 'checkstyle'
}

apply plugin: "fabric-loom"
apply plugin: "io.github.opencubicchunks.gradle.mcGitVersion"
apply plugin: "io.github.opencubicchunks.gradle.mixingen"
apply plugin: 'io.github.opencubicchunks.javaheaders'

javaHeaders {
    acceptedJars = ".*CubicChunksCore.*"
    config = file("javaHeaders.json")
    debug = project.debugArtifactTransforms == "true"
}

mcGitVersion {
    snapshot = true
    mcVersion = "${project.minecraft_version}"
    setCommitVersion '570c0cbf0cdc15b8348a862a519d3399a943af9', '0.0'
}

task generatePackageInfo {
    setGroup('filegen')
    doFirst {
        GeneratePackageInfo.generateFiles(sourceSets.main)
    }
}

task genAll {
    setGroup('filegen')
    dependsOn(generatePackageInfo, generateMixinConfigs)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

mixinGen {
    filePattern = "cubicchunks.mixins.%s.json"
    defaultRefmap = "CubicChunks-refmap.json"
    defaultPackagePrefix = "io.github.opencubicchunks.cubicchunks.mixin"
    defaultCompatibilityLevel = "JAVA_16"
    defaultMinVersion = "0.8"

    config("core") {
        it.required = true
        it.conformVisibility = true
        it.injectorsDefaultRequire = 1
        it.configurationPlugin = 'io.github.opencubicchunks.cubicchunks.mixin.AnnotationConfigPlugin'
    }

    config("levelgen") {
        it.required = true
        it.conformVisibility = true
        it.injectorsDefaultRequire = 1
    }

    config("access") {
        it.required = true
        it.conformVisibility = true
    }

    config("asm") {
        it.required = true
        it.configurationPlugin = 'io.github.opencubicchunks.cubicchunks.mixin.ASMConfigPlugin'
    }

    config("optifine") {
        it.required = true
        it.configurationPlugin = 'io.github.opencubicchunks.cubicchunks.mixin.OptiFineMixinConfig'
        it.injectorsDefaultRequire = 1
    }

    config("debug") {
        it.required = false
        it.conformVisibility = true
        it.injectorsDefaultRequire = 0
        it.configurationPlugin = 'io.github.opencubicchunks.cubicchunks.mixin.DebugMixinConfig'
    }
}

group = "io.github.opencubicchunks" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CubicChunks"

configurations {
    debugCompile
    debugRuntime {
        extendsFrom(debugCompile)
    }
    extraTests
}

sourceSets {
    debug {
        compileClasspath += configurations.debugCompile
        compileClasspath += configurations.compileClasspath
        compileClasspath += sourceSets.main.output
        runtimeClasspath += configurations.debugRuntime
        runtimeClasspath += configurations.runtimeClasspath
        runtimeClasspath += sourceSets.main.output
    }
}

repositories{
    mavenCentral()
    mavenLocal()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://repo.spongepowered.org/maven/'
    }
    jcenter()
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.net/"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "Gegy"
        url = "https://maven.gegy.dev"
    }
}

loom {
    accessWidenerPath = file('src/main/resources/cubicchunks.accesswidener')
    // intermediaryUrl = { "http://localhost:9000/intermediary-20w49a-v2.jar" }

    def dependency = project.configurations.detachedConfiguration(project.dependencies.create("net.fabricmc:sponge-mixin:0.9.4+mixin.0.8.2"))
    dependency.transitive(false)
    def mixinFile = dependency.resolve().iterator().next().toString()

    def args = [
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:-OmitStackTraceInFastThrow",
            "-XX:+UseG1GC",
            "-XX:G1NewSizePercent=20",
            "-XX:G1ReservePercent=20",
            "-XX:MaxGCPauseMillis=50",
            "-XX:G1HeapRegionSize=32M",
            "-javaagent:"+mixinFile,
            "-Dmixin.debug.verbose=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.checks.interfaces=true",
            "-Dcubicchunks.debug=false",
            "-Dcubicchunks.debug.loadorder=false",
            "-Dcubicchunks.debug.window=false",
            "-Dcubicchunks.debug.statusrenderer=false",
            "-Dcubicchunks.debug.heightmaprenderer=false",
            "-Dcubicchunks.debug.heightmaprenderer.server=false",
            "-Dcubicchunks.debug.heightmaprenderer.render_lightmap=false",
            "-Dcubicchunks.debug.heightmaprenderer.radius=2",
            "-Dcubicchunks.debug.heightmapverification=false",
            "-Dcubicchunks.debug.heightmapverification.frequency=1",
            "-Dcubicchunks.debug.biomes=false",
            "-ea"
    ]

    runConfigs {
        client {
            client()
            vmArgs("-Xmx2G")
        }
        server {
            server()
            vmArgs("-Xmx2G")
        }

        client4g {
            client()
            vmArgs("-Xmx4G")
        }
        server4g {
            server()
            vmArgs("-Xmx4G")
        }
    }
    runConfigs.configureEach {
        ideConfigGenerated = true
        vmArgs(args)
    }
}

// for vulkan
project.ext.lwjglVersion = "3.2.2"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = System.getProperty("os.arch").contains("64") ? "natives-windows" : "natives-windows-x86"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        project.ext.lwjglVersion = "3.2.1"
        break
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.17.1:2021.09.05@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Add each module as a dependency
    ["fabric-api-base", "fabric-command-api-v1", "fabric-networking-v0", "fabric-lifecycle-events-v1", "fabric-resource-loader-v0"].forEach {
        modImplementation(fabricApi.module(it, project.fabric_version))
    }

    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
//
//    modRuntime ("supercoder79:databreaker:0.2.8") {
//        exclude module: "fabric-loader"
//    }
    implementation(project(':CubicChunksCore'))

    debugCompile "org.lwjgl:lwjgl-vulkan:$lwjglVersion"
    debugRuntime "org.lwjgl:lwjgl::$lwjglNatives"

    include implementation('com.github.OpenCubicChunks:dasm:1ceaf6f68d')
    include implementation('io.github.opencubicchunks:regionlib:0.63.0-SNAPSHOT')
    include implementation('org.spongepowered:noise:2.0.0-SNAPSHOT')

    include implementation('com.electronwill.night-config:core:3.6.0')
    include implementation('com.electronwill.night-config:toml:3.6.0')

    extraTests(project(':CubicChunksCore')) {
        targetConfiguration = "testArchivesOutput"
    }

    compileOnly('com.google.code.findbugs:jsr305:3.0.1')
    testCompileOnly('com.google.code.findbugs:jsr305:3.0.1')

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.0')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.9.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.9.0')

    testImplementation('org.hamcrest:hamcrest-junit:2.0.0.0')
    testImplementation('org.hamcrest:hamcrest:2.2')

}

// unzipping subproject (CubicChunksCore) tests
task unzipTests(type: Copy) {
    outputs.upToDateWhen {
        false
    }
    dependsOn(configurations["extraTests"])
    from(configurations["extraTests"])
    doFirst {
        var testsFile = configurations["extraTests"].resolve().iterator().next()
        from zipTree(testsFile)
        exclude testsFile.name
    }
    into(sourceSets.test.output.classesDirs.asPath)
}
// add explicit dependency to silence gradle warnings when building
checkstyleTest.dependsOn(unzipTests)

test {
    dependsOn(unzipTests)
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}


jar {
    from "LICENSE"
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "cubicchunks",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"cubicchunks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector": "io.github.opencubicchunks.cubicchunks.mixin.CCMixinConnector",
                "accessWidener": "cubicchunks.accesswidener"
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


